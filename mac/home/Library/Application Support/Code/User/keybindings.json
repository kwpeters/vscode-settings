[
    ////////////////////////////////////////////////////////////////////////////
    // IDE General
    ////////////////////////////////////////////////////////////////////////////
    // These keybindings need to be removed on Windows.
    // {
    //     "key": "ctrl+k s",
    //     "command": "-workbench.action.files.saveAll"
    // },
    // {
    //     "key": "ctrl+shift+s",
    //     "command": "-workbench.action.files.saveAs"
    // },
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveAll"
    },

    ////////////////////////////////////////////////////////////////////////////
    // IDE Navigation (ctrl+i)
    ////////////////////////////////////////////////////////////////////////////

    //
    // Set input focus to the project Explorer
    //
    {
        "key": "ctrl+i e",
        "command": "workbench.view.explorer"
    },

    //
    // Open a project file
    //
    {
        "key": "ctrl+i f",
        "command": "workbench.action.quickOpen"
    },

    //
    // Open a *related* project file
    //
    {
        "key": "alt+r",
        "command": "-findrelated.show",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+i shift+f",
        "command": "findrelated.show",
        "when": "editorFocus"
    },

    // Find symbol in project
    {
        "key": "ctrl+i y",
        "command": "workbench.action.showAllSymbols"
    },

    //
    // Set input focus to project-wide search
    //
    {
        "key": "ctrl+i s",
        "command": "workbench.action.findInFiles"
    },

    //
    // Search within the current file
    //
    {
        "key": "ctrl+i ctrl+i",
        "command": "actions.find",
        "when": "editorTextFocus"
    },

    //
    // Set input focus to the source code management pane
    //
    {
        "key": "ctrl+i g",
        "command": "workbench.view.scm"
    },

    //
    // Set input focus to the debug pane
    //
    {
        "key": "ctrl+i d",
        "command": "workbench.view.debug"
    },

    //
    // Set input focus to the extensions pane
    //
    {
        "key": "ctrl+i x",
        "command": "workbench.view.extensions"
    },

    //
    // Show/hide the integrated terminal pane
    //
    {
        "key": "ctrl+i t",
        "command": "workbench.action.terminal.toggleTerminal"
    },


    ////////////////////////////////////////////////////////////////////////////
    // IDE - Misc
    ////////////////////////////////////////////////////////////////////////////

    // Increase font size
    {
        "key": "ctrl+x ctrl+=",
        "command": "editor.action.fontZoomIn"
    },

    // Decrease font size
    {
        "key": "ctrl+x ctrl+-",
        "command": "editor.action.fontZoomOut"
    },


    ////////////////////////////////////////////////////////////////////////////
    // Cursor Movement (ctrl+m)
    ////////////////////////////////////////////////////////////////////////////

    //
    // Go to beginning of line
    //
    // This keybinding needs to be removed on Mac.
    {
        "key": "ctrl+a",
        "command": "-cursorLineStart",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "cursorHome",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+a",
        "command": "cursorHomeSelect",
        "when": "editorTextFocus && editorHasSelection"
    },
    // This keybinding needs to be removed on Mac.
    {
        "key": "ctrl+e",
        "command": "-cursorLineEnd",
        "when": "textInputFocus"
    },
    //
    // Go to end of line
    //
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+e",
        "command": "cursorEndSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // Go to previous line (up)
    //
    {
        "key": "ctrl+p",
        "command": "cursorUp",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+p",
        "command": "cursorUpSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // Go to top of file
    //
    {
        "key": "shift+alt+,",
        "command": "cursorTop",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "shift+alt+,",
        "command": "cursorTopSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // Go to bottom of file
    //
    {
        "key": "shift+alt+.",
        "command": "cursorBottom",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "shift+alt+.",
        "command": "cursorBottomSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // Go to next line (down)
    //
    {
        "key": "ctrl+n",
        "command": "cursorDown",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+n",
        "command": "cursorDownSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // Go forwarnd one character
    //
    // This keybinding needs to be removed on Windows.
    // {
    //     "key": "ctrl+f",
    //     "command": "-actions.find",
    // },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRightSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // Go backward one character
    //
    // This keybinding needs to be removed on Windows.
    // {
    //     "key": "ctrl+b",
    //     "command": "-workbench.action.quickOpen"
    // },
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+b",
        "command": "cursorLeftSelect",
        "when": "editorTextFocus && editorHasSelection"
    },

    //
    // AceJump
    //
    {
        "key": "ctrl+m a",
        "command": "extension.aceJump.multiChar",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+m",
        "command": "extension.aceJump.multiChar",
        "when": "editorTextFocus"
    },

    //
    // Scroll up
    //
    {
        "key": "ctrl+shift+p",
        "command": "scrollLineUp",
        "when": "editorTextFocus"
    },

    //
    // Scroll down
    //
    {
        "key": "ctrl+shift+n",
        "command": "scrollLineDown",
        "when": "editorTextFocus"
    },

    //
    // Move to previous cursor location
    //
    {
        "key": "ctrl+m b",
        "command": "workbench.action.navigateBack",
        "when": "editorTextFocus"
    },

    //
    // Move forward in cursor position stack
    //
    {
        "key": "ctrl+m f",
        "command": "workbench.action.navigateForward",
        "when": "editorTextFocus"
    },

    {
        "key": "ctrl+m l",
        "command": "workbench.action.gotoLine",
        "when": "editorTextFocus"
    },


    ////////////////////////////////////////////////////////////////////////////
    // Movement - Code related
    ////////////////////////////////////////////////////////////////////////////

    // Move to matching brace
    {
        "key": "ctrl+m ]",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },


    ////////////////////////////////////////////////////////////////////////////
    // Movement within lists
    ////////////////////////////////////////////////////////////////////////////

    // Suggest widget
    {
        "key": "ctrl+p",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },

    // Quick open
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },

    ////////////////////////////////////////////////////////////////////////////
    // Scrolling
    ////////////////////////////////////////////////////////////////////////////
    {
        "key": "ctrl+up",
        "command": "scrollLineUp",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+down",
        "command": "scrollLineDown",
        "when": "editorTextFocus"
    },

    ////////////////////////////////////////////////////////////////////////////
    // Selection (ctrl+g)
    ////////////////////////////////////////////////////////////////////////////

    //
    // Shrink selection
    //
    // This keybinding needs to be removed on Mac.
    {
        "key": "ctrl+-",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "ctrl+-",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },

    //
    // Expand selection
    //
    {
        "key": "ctrl+=",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },

    //
    // Cancel selection
    //
    // This keybinding needs to be removed on Mac.
    {
        "key": "ctrl+o",
        "command": "-lineBreakInsert",
        "when": "textInputFocus && !editorReadonly"
    },
    // This keybinding needs to be removed on Windows.
    // {
    //     "key": "ctrl+o",
    //     "command": "-workbench.action.files.openFile"
    // },
    {
        "key": "ctrl+o",
        "command": "cancelSelection",
        "when": "editorTextFocus && editorHasSelection"
    },
    {
        "key": "ctrl+o",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    // This keybinding needs to be removed on Mac.
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm"
    },
    //
    // Select next find match
    //
    {
        "key": "ctrl+shift+g",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },

    // Start sticky selection
    {
        "key": "ctrl+; s",
        "command": "cursorRightSelect",
        "when": "editorTextFocus && !editorReadonly"
    },

    ////////////////////////////////////////////////////////////////////////////
    // Cut/Copy/Paste
    ////////////////////////////////////////////////////////////////////////////

    //
    // Cutting
    //
    // This keybinding needs to be removed on Mac.
    {
        "key": "ctrl+k",
        "command": "-deleteAllRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        // When ctrl+k and selection exists, just cut the selection to ring.
        "key": "ctrl+k",
        "command": "editor.action.clipboardCutAction",
        "when": "editorTextFocus && !editorReadonly && editorHasSelection"
    },

    //
    // Copying
    //
    // This keybinding needs to be removed on Windows.
    // {
    //     "key": "alt+w",
    //     "command": "-toggleFindWholeWord",
    //     "when": "editorFocus"
    // },
    {
        "key": "alt+w",
        "command": "editor.action.clipboardCopyAction",
        "when": "editorFocus"
    },

    //
    // Pasting
    //
    // This keybinding needs to be removed on Windows.
    // {
    //     "key": "ctrl+y",
    //     "command": "-redo",
    //     "when": "textInputFocus && !editorReadonly"
    // },
    {
        "key": "ctrl+y",
        "command": "editor.action.clipboardPasteAction"
        // No "when" because I want it to work everywhere
    },

    ////////////////////////////////////////////////////////////////////////////
    // Editor Panes
    ////////////////////////////////////////////////////////////////////////////

    {
        "key": "ctrl+x 3",
        "command": "workbench.action.splitEditorRight",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+x 2",
        "command": "extension.airlinerSplitEditorDown",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+x o",
        "command": "workbench.action.focusNextGroup",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+x 0",
        "command": "workbench.action.closeActiveEditor",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+x t",
        "command": "extension.airlinerSplitTop",
        "when": "editorFocus"
    },

    // Use ctrl+tab and ctrl+shift+tab to navigate across editors of all groups
    // (instead of only within the active group as the default keybindings do).
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    },

    ////////////////////////////////////////////////////////////////////////////
    // Text Editing
    ////////////////////////////////////////////////////////////////////////////
    // This keybinding needs to be removed on Windows.
    // {
    //     "key": "ctrl+d",
    //     "command": "-editor.action.addSelectionToNextFindMatch",
    //     "when": "editorFocus"
    // },
    {
        // Do not remove existing ctrl+d keybinding, because we still want that
        // to work when there is a selection.
        "key": "ctrl+d",
        "command": "extension.airlinerHungryDeleteRight",
        "when": "editorTextFocus && !editorHasSelection && !editorReadonly"
    },

    // Show definition in a popup.
    {
        "key": "ctrl+; d",
        "command": "editor.action.showDefinitionPreviewHover"
    },
    {
        "key": "ctrl+; a",
        "command": "wwm.aligncode",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+; 2",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    // This keybinding needs to be removed on Mac.
    {
        "key": "cmd+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+/",
        "command": "extension.airlinerToggleComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k",
        "command": "extension.airlinerCutToEol",
        "when": "editorTextFocus && !editorHasSelection && !editorReadonly"
    },
    {
        "key": "ctrl+; ;",
        "command": "extension.airlinerAppendSemicolon"
    },
    {
        // Do not remove existing backspace keybinding, because we still want
        // that to work when there is a selection.
        "key": "backspace",
        "command": "extension.airlinerHungryBackspace",
        "when": "editorTextFocus && !editorHasSelection && !editorReadonly"
    },


    ////////////////////////////////////////////////////////////////////////////
    // Folding
    ////////////////////////////////////////////////////////////////////////////

    // Toggle folding
    {
        "key": "ctrl+; f",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    }
]
