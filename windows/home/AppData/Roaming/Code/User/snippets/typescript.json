{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"arrow": {
        "prefix": "arrow",
        "body": [
            "${1:async }(${2}) => {$0}"
        ],
        "description": "Inserts an arrow function"
    },
	"clog": {
		"prefix": "clog",
		"body": [
			"console.log(${0});"
		],
		"description": "Inserts console.log()"
	},
	"func": {
		"prefix": "func",
		"body": [
			"function ${1:funcName}(${2:args: type}): ${3:returnType}\n{${0}}"
		],
		"description": "Inserts a function"
	},

    "iife": {
        "prefix": "iife",
        "body": [
            "(${1:async }function (): ${2:Promise<void>} {",
            "    ${0}",
            "})();"
        ],
        "description": "Insert an immediately invoked function expression"
    },
	"import": {
		"prefix": "import",
		"body": [
			"import ${2:* as xyzzy} from \"${1:packageName}\";"
		],
		"description": "Inserts an import statement"
	},
	"3 line comment": {
		"prefix": "tlc",
		"body": [
			"//",
			"// ${0}",
			"//"
		],
		"description": "3 line comment"
	},
	"todo": {
		"prefix": "todo",
		"body": [
			"// TODO: ${0}"
		],
		"description": "Inserts a TODO comment"
	},
	"must": {
		"prefix": "must",
		"body": [
			"// MUST: ${0}"
		],
		"description": "Inserts a MUST comment"
	},
	"region comment": {
		"prefix": "region",
		"body": [
			"// #region ${0}",
			"// #endregion"
		],
		"description": "region comment"
	},
	"separator comment": {
		"prefix": "sep",
		"body": [
			"////////////////////////////////////////////////////////////////////////////////"
		],
		"description": "separator comment"
	},
	"then()": {
		"prefix": "then",
		"body": [
			"",
			".then(($1) => {$0})"
		],
		"description": "then()"
	},

    ////////////////////////////////////////////////////////////////////////////
    // JSDoc
    ////////////////////////////////////////////////////////////////////////////
    "JSDoc for a function": {
        "prefix": "jsdfunc",
        "body": [
            "/**",
            " * ${0}",
            " * @param param - Description",
            " * @return Description",
            " */"
        ],
        "description": "JSDoc for a function"
    },
    ////////////////////////////////////////////////////////////////////////////
    // Jasmine
    ////////////////////////////////////////////////////////////////////////////
    "Jasmine describe()": {
        "prefix": "jasdesc",
        "body": [
            "describe(\"${1}\", () => {$0});"
        ],
        "description": "Jasmine describe()"
    },
    "Jasmine it()": {
        "prefix": "jasit",
        "body": [
            "it(\"${1}\", ${2:async }() => {$0});"
        ],
        "description": "Jasmine it()"
    },
    "Jasmine expect()": {
        "prefix": "exp",
        "body": [
            "expect(${1:expr}).${2:toEqual}($0);"
        ],
        "description": "Jasmine expect()"
    },


    ////////////////////////////////////////////////////////////////////////////
    // TestCafe
    ////////////////////////////////////////////////////////////////////////////
    "TestCafe fixture": {
        "prefix": "tcf",
        "body": [
            "import \"testcafe\";",
            "",
            "fixture(\"${2:fixture_title}\")",
            ".page(${1:\"http://localhost:3000\"})",
            ".before(async (ctx) => {",
            "})",
            ".beforeEach(async (t) => {",
            "})",
            ".afterEach(async (t) => {",
            "})",
            ".after(async (ctx) => {",
            "});"
        ],
        "description": "TestCafe fixture"
    },
    "TestCafe test": {
        "prefix": "tct",
        "body": [
            "test(\"${1:test_title}\", async (t) => {",
            "})",
            ".before(async (t) => {",
            "})",
            ".after(async (t) => {",
            "});"
        ],
        "description": "TestCafe test"
    },

    ////////////////////////////////////////////////////////////////////////////
    // TSLint
    ////////////////////////////////////////////////////////////////////////////
    "TSLint ignore file": {
        "prefix": "tslintignorefile",
        "body": [
            "// tslint:disable: ${1:max-classes-per-file}${0}"
        ],
        "description": "TSLint ignore for rest of file"
    },
    "TSLint ignore next line": {
        "prefix": "tslintignorefile",
        "body": [
            "// tslint:disable-next-line: ${1:max-classes-per-file}${0}"
        ],
        "description": "TSLint ignore next line"
    },

}
