{"ref":"60f5ddeb-4ccb-43ae-8ca8-7b1309ced0da","content":"{\"version\":1,\"machineId\":\"f7c05ec6-d3fd-4a7a-8e80-b7ba2770ab03\",\"content\":\"{\\\"javascript.json\\\":\\\"{\\\\r\\\\n\\\\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and\\\\r\\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\r\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\\\r\\\\n\\\\t// same ids are connected.\\\\r\\\\n\\\\t// Example:\\\\r\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\r\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\r\\\\n\\\\t// \\\\t],\\\\r\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\r\\\\n\\\\t// }\\\\r\\\\n\\\\r\\\\n    \\\\\\\"arrow\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"arrow\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"${1:async }(${2}) => {$0}\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Inserts an arrow function\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\",\\\"json.json\\\":\\\"{\\\\r\\\\n\\\\t// Place your snippets for json here. Each snippet is defined under a snippet name and has a prefix, body and\\\\r\\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\r\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\\\r\\\\n\\\\t// same ids are connected.\\\\r\\\\n\\\\t// Example:\\\\r\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\r\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\r\\\\n\\\\t// \\\\t],\\\\r\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\r\\\\n\\\\t// }\\\\r\\\\n\\\\r\\\\n    \\\\\\\"vscsnippet\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"vscsnippet\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"\\\\\\\\\\\\\\\"${1:prefix}\\\\\\\\\\\\\\\": {\\\\\\\",\\\\r\\\\n            \\\\\\\"    \\\\\\\\\\\\\\\"prefix\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\",\\\\\\\",\\\\r\\\\n            \\\\\\\"    \\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\": [\\\\\\\",\\\\r\\\\n            \\\\\\\"        $0\\\\\\\",\\\\r\\\\n            \\\\\\\"    ],\\\\\\\",\\\\r\\\\n            \\\\\\\"    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"${2:description}\\\\\\\\\\\\\\\"\\\\\\\",\\\\r\\\\n            \\\\\\\"}\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Visual Studio Code snippet\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\",\\\"markdown.json\\\":\\\"{\\\\r\\\\n\\\\t// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and\\\\r\\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\r\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\\\r\\\\n\\\\t// same ids are connected.\\\\r\\\\n\\\\t// Example:\\\\r\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\r\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\r\\\\n\\\\t// \\\\t],\\\\r\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\r\\\\n\\\\t// }\\\\r\\\\n\\\\r\\\\n    \\\\\\\"A code comment block\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"code\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"```${1:javascript}$0\\\\\\\",\\\\r\\\\n            \\\\\\\"```\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"A code comment block\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\",\\\"typescript.json\\\":\\\"{\\\\r\\\\n\\\\t// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and\\\\r\\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\r\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\\\r\\\\n\\\\t// same ids are connected.\\\\r\\\\n\\\\t// Example:\\\\r\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\r\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\r\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\r\\\\n\\\\t// \\\\t],\\\\r\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\r\\\\n\\\\t// }\\\\r\\\\n\\\\r\\\\n\\\\t\\\\\\\"arrow\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"arrow\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"${1:async }(${2}) => {$0}\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Inserts an arrow function\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n\\\\t\\\\\\\"clog\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"clog\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"console.log(${0});\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Inserts console.log()\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"func\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"func\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"function ${1:funcName}(${2:args: type}): ${3:returnType}\\\\\\\\n{${0}}\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Inserts a function\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\r\\\\n    \\\\\\\"iife\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"iife\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"(${1:async }function (): ${2:Promise<void>} {\\\\\\\",\\\\r\\\\n            \\\\\\\"    ${0}\\\\\\\",\\\\r\\\\n            \\\\\\\"})();\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Insert an immediately invoked function expression\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n\\\\t\\\\\\\"import\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"import\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"import ${2:* as xyzzy} from \\\\\\\\\\\\\\\"${1:packageName}\\\\\\\\\\\\\\\";\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Inserts an import statement\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"3 line comment\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"tlc\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"//\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"// ${0}\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"//\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"3 line comment\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"todo\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"todo\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"// TODO: ${0}\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Inserts a TODO comment\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"must\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"must\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"// MUST: ${0}\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Inserts a MUST comment\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"region comment\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"region\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"// #region ${0}\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"// #endregion\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"region comment\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"separator comment\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"sep\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"////////////////////////////////////////////////////////////////////////////////\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"separator comment\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\t\\\\\\\"then()\\\\\\\": {\\\\r\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"then\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\r\\\\n\\\\t\\\\t\\\\t\\\\\\\".then(($1) => {$0})\\\\\\\"\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"then()\\\\\\\"\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    // JSDoc\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    \\\\\\\"JSDoc for a function\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"jsdfunc\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"/**\\\\\\\",\\\\r\\\\n            \\\\\\\" * ${0}\\\\\\\",\\\\r\\\\n            \\\\\\\" * @param param - Description\\\\\\\",\\\\r\\\\n            \\\\\\\" * @return Description\\\\\\\",\\\\r\\\\n            \\\\\\\" */\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"JSDoc for a function\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    // Jasmine\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    \\\\\\\"Jasmine describe()\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"jasdesc\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"describe(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", () => {$0});\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Jasmine describe()\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"Jasmine it()\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"jasit\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"it(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", ${2:async }() => {$0});\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Jasmine it()\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"Jasmine expect()\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"exp\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"expect(${1:expr}).${2:toEqual}($0);\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"Jasmine expect()\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    // TestCafe\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    \\\\\\\"TestCafe fixture\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"tcf\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"import \\\\\\\\\\\\\\\"testcafe\\\\\\\\\\\\\\\";\\\\\\\",\\\\r\\\\n            \\\\\\\"\\\\\\\",\\\\r\\\\n            \\\\\\\"fixture(\\\\\\\\\\\\\\\"${2:fixture_title}\\\\\\\\\\\\\\\")\\\\\\\",\\\\r\\\\n            \\\\\\\".page(${1:\\\\\\\\\\\\\\\"http://localhost:3000\\\\\\\\\\\\\\\"})\\\\\\\",\\\\r\\\\n            \\\\\\\".before(async (ctx) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"})\\\\\\\",\\\\r\\\\n            \\\\\\\".beforeEach(async (t) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"})\\\\\\\",\\\\r\\\\n            \\\\\\\".afterEach(async (t) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"})\\\\\\\",\\\\r\\\\n            \\\\\\\".after(async (ctx) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"});\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"TestCafe fixture\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"TestCafe test\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"tct\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"test(\\\\\\\\\\\\\\\"${1:test_title}\\\\\\\\\\\\\\\", async (t) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"})\\\\\\\",\\\\r\\\\n            \\\\\\\".before(async (t) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"})\\\\\\\",\\\\r\\\\n            \\\\\\\".after(async (t) => {\\\\\\\",\\\\r\\\\n            \\\\\\\"});\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"TestCafe test\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    // TSLint\\\\r\\\\n    ////////////////////////////////////////////////////////////////////////////\\\\r\\\\n    \\\\\\\"TSLint ignore file\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"tslintignorefile\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"// tslint:disable: ${1:max-classes-per-file}${0}\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"TSLint ignore for rest of file\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"TSLint ignore next line\\\\\\\": {\\\\r\\\\n        \\\\\\\"prefix\\\\\\\": \\\\\\\"tslintignorefile\\\\\\\",\\\\r\\\\n        \\\\\\\"body\\\\\\\": [\\\\r\\\\n            \\\\\\\"// tslint:disable-next-line: ${1:max-classes-per-file}${0}\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"TSLint ignore next line\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\"}\"}"}